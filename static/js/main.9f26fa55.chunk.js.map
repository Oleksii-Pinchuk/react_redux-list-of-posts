{"version":3,"sources":["api/api.ts","features/post/postSlice.ts","hooks/hooks.ts","components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","features/comments/commentsSlice.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","features/user/userSlice.ts","components/UserSelect/UserSelect.tsx","App.tsx","store/index.ts","index.tsx"],"names":["BASE_URL","getData","endpoint","a","fetch","response","json","Error","removeData","method","getPosts","createAsyncThunk","userId","deletePost","postId","postSlice","createSlice","name","initialState","posts","selectedPostId","isPostsLoading","reducers","changePostId","state","action","payload","extraReducers","pending","type","fulfilled","rejected","actions","useAppDispatch","useDispatch","useAppSelector","useSelector","Loader","className","PostsList","dispatch","postReducer","selectedUserId","userReducer","useEffect","handleOpenButton","id","map","post","title","onClick","getCommentsByPostId","addComment","comment","email","body","headers","JSON","stringify","deleteComment","commentId","commentsSlice","comments","isCommentsLoading","isCommentsVisible","changeCommentsVisibility","NewCommentForm","useState","setComment","isFormFilled","setIsFormFilled","handleChange","event","target","value","submitForm","preventDefault","trim","mail","toLowerCase","match","onSubmit","placeholder","onChange","PostDetails","commentsReducer","selectedPost","find","onHandleRemoveButton","length","getUsers","userSlice","users","isUsersLoading","changeUserId","UserSelect","htmlFor","user","App","rootReducer","combineReducers","store","configureStore","reducer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9f26fa55.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getData = async (endpoint: string) => {\n  try {\n    const response = await fetch(`${BASE_URL}/${endpoint}`);\n\n    return await response.json();\n  } catch (error) {\n    throw new Error();\n  }\n};\n\nexport const removeData = async (endpoint: string) => {\n  try {\n    const response = await fetch(`${BASE_URL}/${endpoint}`,\n      {\n        method: 'DELETE',\n      });\n\n    return await response.json();\n  } catch (error) {\n    throw new Error();\n  }\n};\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getData, removeData } from '../../api/api';\n\nexport const getPosts = createAsyncThunk(\n  'post/getPosts',\n  async (userId: number): Promise<Post[]> => {\n    if (userId) {\n      return getData(`/posts?userId=${userId}`);\n    }\n\n    return getData('/posts/');\n  },\n);\n\nexport const deletePost = createAsyncThunk(\n  'post/deletePost',\n  async (postId: number) => {\n    return removeData(`posts/${postId}`);\n  },\n);\n\nconst initialState: PostState = {\n  posts: [],\n  selectedPostId: 0,\n  isPostsLoading: true,\n};\n\nconst postSlice = createSlice({\n  name: 'post',\n  initialState,\n  reducers: {\n    changePostId: (state: PostState, action) => {\n      state.selectedPostId = action.payload;\n    },\n  },\n\n  extraReducers: {\n    [getPosts.pending.type]: (state: PostState) => {\n      state.isPostsLoading = true;\n    },\n    [getPosts.fulfilled.type]: (state: PostState, action) => {\n      state.isPostsLoading = false;\n      state.posts = action.payload;\n    },\n    [getPosts.rejected.type]: (state: PostState) => {\n      state.isPostsLoading = false;\n    },\n  },\n});\n\nexport const { changePostId } = postSlice.actions;\n\nexport default postSlice.reducer;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from '../store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect } from 'react';\nimport {\n  changePostId,\n  deletePost,\n  getPosts,\n} from '../../features/post/postSlice';\nimport { useAppDispatch, useAppSelector } from '../../hooks/hooks';\n\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\nexport const PostsList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const {\n    posts,\n    selectedPostId,\n    isPostsLoading,\n  } = useAppSelector(state => state.postReducer);\n\n  const { selectedUserId } = useAppSelector(state => state.userReducer);\n\n  useEffect(() => {\n    dispatch(getPosts(selectedUserId));\n  }, [selectedUserId]);\n\n  const handleOpenButton = (id: number) => {\n    dispatch(changePostId(id));\n  };\n\n  const handleDeleteButton = (postId: number) => {\n    dispatch(deletePost(postId));\n    dispatch(getPosts(selectedUserId));\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      {isPostsLoading ? (\n        <Loader />\n      ) : (\n        <ul className=\"PostsList__list\">\n          {posts.map((post: Post) => (\n            <li className=\"PostsList__item\" key={post.id}>\n              <div>\n                <b>{`[User #${post.userId}]:`}</b>\n                {post.title}\n              </div>\n              <div>\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => handleDeleteButton(post.id)}\n                >\n                  Delete\n                </button>\n                {post.id === selectedPostId ? (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => handleOpenButton(0)}\n                  >\n                    Close\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => handleOpenButton(post.id)}\n                  >\n                    Open\n                  </button>\n                )}\n              </div>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getData, removeData, BASE_URL } from '../../api/api';\n\nconst initialState: CommentsState = {\n  comments: [],\n  isCommentsLoading: false,\n  isCommentsVisible: true,\n};\n\nexport const getCommentsByPostId = createAsyncThunk(\n  'comments/getCommentsByPostId',\n  async (postId: number): Promise<Comment[]> => {\n    return getData(`/comments?postId=${postId}`);\n  },\n);\n\nexport const addComment = createAsyncThunk(\n  'comments/addComment',\n  async (comment: NewComment) => {\n    const {\n      postId,\n      name,\n      email,\n      body,\n    } = comment;\n\n    try {\n      const response = await fetch(`${BASE_URL}/comments`, {\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8',\n        },\n        method: 'POST',\n        body: JSON.stringify({\n          postId,\n          name,\n          email,\n          body,\n        }),\n      });\n\n      return await response.json();\n    } catch (error) {\n      throw new Error();\n    }\n  },\n);\n\nexport const deleteComment = createAsyncThunk(\n  'comments/deleteComment',\n  async (commentId: number) => {\n    return removeData(`/comments/${commentId}`);\n  },\n);\n\nconst commentsSlice = createSlice({\n  name: 'comments',\n  initialState,\n  reducers: {\n    changeCommentsVisibility: (state, action) => {\n      state.isCommentsVisible = action.payload;\n    },\n  },\n  extraReducers: {\n    [getCommentsByPostId.pending.type]: (state: CommentsState) => {\n      state.isCommentsLoading = true;\n    },\n    [getCommentsByPostId.fulfilled.type]: (state: CommentsState, action) => {\n      state.isCommentsLoading = false;\n      state.comments = action.payload;\n    },\n    [getCommentsByPostId.rejected.type]: (state: CommentsState) => {\n      state.isCommentsLoading = false;\n    },\n    [addComment.pending.type]: (state: CommentsState) => {\n      state.isCommentsLoading = true;\n    },\n    [addComment.fulfilled.type]: (state: CommentsState) => {\n      state.isCommentsLoading = false;\n    },\n    [addComment.rejected.type]: (state: CommentsState) => {\n      state.isCommentsLoading = false;\n    },\n    [deleteComment.pending.type]: (state: CommentsState) => {\n      state.isCommentsLoading = true;\n    },\n    [deleteComment.fulfilled.type]: (state: CommentsState) => {\n      state.isCommentsLoading = false;\n    },\n    [deleteComment.rejected.type]: (state: CommentsState) => {\n      state.isCommentsLoading = false;\n    },\n  },\n});\n\nexport const { changeCommentsVisibility } = commentsSlice.actions;\nexport default commentsSlice.reducer;\n","import React, { useState } from 'react';\n// eslint-disable-next-line max-len\nimport { addComment, getCommentsByPostId } from '../../features/comments/commentsSlice';\n\nimport { useAppDispatch, useAppSelector } from '../../hooks/hooks';\n\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { selectedPostId } = useAppSelector(state => state.postReducer);\n\n  const [comment, setComment] = useState<NewComment>({\n    postId: selectedPostId,\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const { name, email, body } = comment;\n  const [isFormFilled, setIsFormFilled] = useState(true);\n\n  const handleChange = (event :React.ChangeEvent<HTMLInputElement>\n  | React.ChangeEvent<HTMLTextAreaElement>) => {\n    setComment({\n      ...comment,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const validateEmail = (mail: string) => {\n    return mail\n      .toLowerCase()\n      .match(\n        // eslint-disable-next-line max-len\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n      );\n  };\n\n  const submitForm = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (name.trim() && validateEmail(email) && body.trim()) {\n      setIsFormFilled(true);\n      await dispatch(addComment(comment));\n      await dispatch(getCommentsByPostId(selectedPostId));\n      setComment({\n        postId: selectedPostId,\n        name: '',\n        email: '',\n        body: '',\n      });\n    } else {\n      setIsFormFilled(false);\n    }\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={submitForm}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={handleChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n      {!isFormFilled && (\n        <div className=\"NewCommentForm__error-message\">\n          Filling form not completed!\n        </div>\n      )}\n    </form>\n  );\n};\n","import React, { useEffect } from 'react';\n\nimport { NewCommentForm } from '../NewCommentForm';\n\nimport './PostDetails.scss';\nimport { useAppDispatch, useAppSelector } from '../../hooks/hooks';\nimport {\n  changeCommentsVisibility,\n  deleteComment,\n  getCommentsByPostId,\n} from '../../features/comments/commentsSlice';\n\nexport const PostDetails: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { selectedPostId } = useAppSelector(state => state.postReducer);\n  const { posts } = useAppSelector(state => state.postReducer);\n  const {\n    comments,\n    isCommentsVisible,\n  } = useAppSelector(state => state.commentsReducer);\n\n  const selectedPost = posts.find((post: Post) => post.id === selectedPostId);\n\n  useEffect(() => {\n    if (selectedPostId) {\n      dispatch(getCommentsByPostId(selectedPostId));\n    }\n  }, [selectedPostId]);\n\n  const onHandleRemoveButton = async (commentId: number, postId: number) => {\n    await dispatch(deleteComment(commentId));\n    await dispatch(getCommentsByPostId(postId));\n  };\n\n  const onChangeCommentsStatus = () => {\n    dispatch(changeCommentsVisibility(!isCommentsVisible));\n  };\n\n  return (\n    selectedPost ? (\n      <>\n        <div className=\"PostDetails\">\n          <h2>Post details:</h2>\n          <section className=\"PostDetails__post\">\n            <p>{selectedPost?.body}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            {comments.length !== 0 && (\n              <>\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={onChangeCommentsStatus}\n                >\n                  {`${!isCommentsVisible ? 'Show' : 'Hide'} ${comments.length} comments`}\n                </button>\n\n                {isCommentsVisible && (\n                  <ul className=\"PostDetails__list\">\n                    {comments.map((comment: PostComment) => (\n                      <li\n                        className=\"PostDetails__list-item\"\n                        key={comment.id}\n                      >\n                        <button\n                          type=\"button\"\n                          className=\"PostDetails__remove-button button\"\n                          // eslint-disable-next-line max-len\n                          onClick={() => onHandleRemoveButton(comment.id, comment.postId)}\n                        >\n                          X\n                        </button>\n                        <p>{comment.body}</p>\n                      </li>\n                    ))}\n                  </ul>\n                )}\n              </>\n            )}\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm />\n            </div>\n          </section>\n        </div>\n      </>\n    ) : (\n      <h2>\n        Post not selected.\n      </h2>\n    )\n  );\n};\n","/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getData } from '../../api/api';\n\nconst initialState: UserState = {\n  users: [],\n  selectedUserId: 0,\n  isUsersLoading: false,\n};\n\nexport const getUsers = createAsyncThunk(\n  'user/getUsers',\n  async (): Promise<User[]> => {\n    return getData('/users');\n  },\n);\n\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    changeUserId: (state: UserState, action) => {\n      state.selectedUserId = action.payload;\n    },\n  },\n  extraReducers: {\n    [getUsers.pending.type]: (state: UserState) => {\n      state.isUsersLoading = true;\n    },\n    [getUsers.fulfilled.type]: (state: UserState, action) => {\n      state.isUsersLoading = false;\n      state.users = action.payload;\n    },\n    [getUsers.rejected.type]: (state: UserState) => {\n      state.isUsersLoading = false;\n    },\n  },\n});\n\nexport const { changeUserId } = userSlice.actions;\n\nexport default userSlice.reducer;\n","import React, { useEffect } from 'react';\nimport { changePostId } from '../../features/post/postSlice';\nimport { changeUserId, getUsers } from '../../features/user/userSlice';\nimport { useAppDispatch, useAppSelector } from '../../hooks/hooks';\n\nexport const UserSelect: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { users } = useAppSelector(state => state.userReducer);\n\n  useEffect(() => {\n    dispatch(getUsers());\n  }, []);\n\n  const onChangeSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(changeUserId(+(event.target.value)));\n    dispatch(changePostId(0));\n  };\n\n  return (\n    <label htmlFor=\"userSelect\" className=\"UserSelect__label\">\n      Select a user: &nbsp;\n      <select\n        id=\"userSelect\"\n        className=\"App__user-selector\"\n        onChange={onChangeSelect}\n      >\n        <option value={0}>\n          All users\n        </option>\n\n        {users.map((user: User) => (\n          <option\n            key={user.id}\n            value={user.id}\n          >\n            {user.name}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n};\n","import React from 'react';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/user/userSlice';\nimport postReducer from '../features/post/postSlice';\nimport commentsReducer from '../features/comments/commentsSlice';\n\nconst rootReducer = combineReducers({\n  userReducer,\n  postReducer,\n  commentsReducer,\n});\n\nexport const setupStore = () => {\n  return configureStore({\n    reducer: rootReducer,\n  });\n};\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport type AppStore = ReturnType<typeof setupStore>;\nexport type AppDispatch = AppStore['dispatch'];\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport { setupStore } from './store/index';\n\nconst store = setupStore();\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}